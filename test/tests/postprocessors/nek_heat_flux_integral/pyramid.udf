#include "udf.hpp"

void UDF_LoadKernels(nrs_t *nrs)
{
}

void UDF_Setup(nrs_t *nrs)
{
  auto mesh = nrs->cds->mesh[0];

  int n_gll_points = mesh->Np * mesh->Nelements;
  for (int n = 0; n < n_gll_points; ++n)
  {
    nrs->U[n + 0 * nrs->fieldOffset] = 0.0; // x-velocity
    nrs->U[n + 1 * nrs->fieldOffset] = 0.0; // y-velocity
    nrs->U[n + 2 * nrs->fieldOffset] = 0.0; // z-velocity

    nrs->P[n] = 0.0; // pressure

    dfloat x = mesh->x[n];
    dfloat y = mesh->y[n];
    dfloat z = mesh->z[n];

    nrs->cds->S[n + 0 * nrs->cds->fieldOffset[0]] = 100*(exp(x) + exp(y)+exp(z)+sin(y) + x*y*z) +
      500 * x + 500 * y; // temperature
  }

  // we need to set this here (not in the par file) because we set the solver = none for
  // the temperature, which in nekRS then stops reading anything else in the TEMPERATURE block.
  // So for this test, we need to set this here to get the corrrect behavior in nekrs::heatFluxIntegral.
  platform->options.setArgs("SCALAR00 DIFFUSIVITY", "25");
}

void UDF_ExecuteStep(nrs_t *nrs, dfloat time, int tstep)
{
}
