[Tests]
  [one_mesh]
    type = Exodiff
    input = one_mesh.i
    exodiff = 'one_mesh_out.e'
    # This test has very few particles, and OpenMC will error if there aren't any particles
    # on a particular process
    max_parallel = 32
    requirement = "The heat source shall be tallied on an unstructured mesh and normalized against "
                  "a local tally when a single mesh is used. "
                  "The gold file was created with the original OpenMCProblem, showing "
                  "that the mesh tally implementation is equivalent."
    required_objects = 'OpenMCCellAverageProblem'
  []
  [one_mesh_global]
    type = Exodiff
    input = one_mesh_global.i
    exodiff = 'one_mesh_global_out.e'
    # This test has very few particles, and OpenMC will error if there aren't any particles
    # on a particular process
    max_parallel = 32
    requirement = "The heat source shall be tallied on an unstructured mesh and normalized against "
                  "a global tally when a single mesh is used. This test was run with successively finer "
                  "meshes (from 256 elements to 94k elements) to show that the power of the mesh tally "
                  "approaches the value of a cell tally as the difference in volume decreases."
    required_objects = 'OpenMCCellAverageProblem'
  []
  [multiple_meshes]
    type = Exodiff
    input = multiple_meshes.i
    exodiff = 'multiple_meshes_out.e'
    # This test has very few particles, and OpenMC will error if there aren't any particles
    # on a particular process
    max_parallel = 32
    requirement = "The heat source shall be tallied on an unstructured mesh and normalized against "
                  "a local tally when multiple identical meshes are used. "
                  "The gold file was created with the original OpenMCProblem, showing "
                  "that the mesh tally implementation is equivalent."
    required_objects = 'OpenMCCellAverageProblem'
  []
  [multiple_meshes_global]
    type = Exodiff
    input = multiple_meshes_global.i
    exodiff = 'multiple_meshes_global_out.e'
    # This test has very few particles, and OpenMC will error if there aren't any particles
    # on a particular process
    max_parallel = 32
    requirement = "The heat source shall be tallied on an unstructured mesh and normalized against "
                  "a global tally when multiple identical meshes are used. This test was run with successively finer "
                  "meshes (from 256 elements to 94k elements) to show that the power of the mesh tally "
                  "approaches the value of a cell tally as the difference in volume decreases."
    required_objects = 'OpenMCCellAverageProblem'
  []
  [different_units]
    type = Exodiff
    input = different_units.i
    exodiff = 'different_units_out.e'
    # This test has very few particles, and OpenMC will error if there aren't any particles
    # on a particular process
    max_parallel = 32
    requirement = "The heat source shall be correctly projected onto a [Mesh] in units of meters "
                  "when the tally mesh template is in units of centimeters."
    required_objects = 'OpenMCCellAverageProblem'
  []
  [different_units_and_translations]
    type = Exodiff
    input = different_units_and_translations.i
    exodiff = 'different_units_and_translations_out.e'
    # This test has very few particles, and OpenMC will error if there aren't any particles
    # on a particular process
    max_parallel = 32
    requirement = "The heat source shall be correctly projected onto a [Mesh] in units of meters "
                  "when the tally mesh template and translations are in units of centimeters. "
                  "The output was compared against the multiple_meshes case, which used an input "
                  "entirely specified in terms of centimeters."
    required_objects = 'OpenMCCellAverageProblem'
  []
  [fission_tally_std_dev]
    type = CSVDiff
    input = fission_tally_std_dev.i
    csvdiff = fission_tally_std_dev_out.csv
    # This test has very few particles, and OpenMC will error if there aren't any particles
    # on a particular process
    max_parallel = 32
    requirement = "The fission tally standard deviation shall be output correctly for unstructured "
                  "mesh tallies."
    required_objects = 'OpenMCCellAverageProblem'
  []
  [disable_renumbering]
    type = RunException
    input = one_mesh.i
    cli_args = 'Mesh/allow_renumbering=true --distributed-mesh'
    expect_err = "Mesh tallies currently require 'allow_renumbering = false' to be set in the \[Mesh\]!"
    requirement = "Mesh tallies shall temporarily require disabled renumbering until capability is available"
    required_objects = 'OpenMCCellAverageProblem'
  []
[]
