[Tests]
  [no_coupling]
    type = CSVDiff
    input = no_coupling.i
    csvdiff = no_coupling_out.csv
    requirement = "The system shall allow a mesh tally for coupling OpenMC, without any physics feedback."
    mesh_mode = 'replicated'
    required_objects = 'OpenMCCellAverageProblem'
  []
  [one_mesh]
    type = Exodiff
    input = one_mesh.i
    exodiff = 'one_mesh_out.e'
    cli_args = 'Problem/output_cell_mapping=false'
    # This test has very few particles, and OpenMC will error if there aren't any particles
    # on a particular process
    max_parallel = 32
    requirement = "The heat source shall be tallied on an unstructured mesh and normalized against "
                  "a local tally when a single mesh is used."
    required_objects = 'OpenMCCellAverageProblem'
  []
  [one_mesh_no_input_file]
    type = Exodiff
    input = one_mesh_no_input_file.i
    exodiff = 'one_mesh_out.e'
    cli_args = "Outputs/file_base=one_mesh_out Mesh/parallel_type=replicated"
    # This test has very few particles, and OpenMC will error if there aren't any particles
    # on a particular process
    max_parallel = 32
    requirement = "This test is nearly identical to one_mesh. The difference lies in having no mesh_template "
                  "in the input file. Without one, the system should be able to directly tally on a moose "
                  "mesh instead of a file "
    required_objects = 'OpenMCCellAverageProblem'
  []
  [moose_mesh_tally_distributed]
    type = RunException
    input = one_mesh_no_input_file.i
    mesh_mode = 'distributed'
    expect_err = "Directly tallying on the \[Mesh\] block by OpenMC is not yet supported "
                 "for distributed meshes!"
    requirement = "The system shall error if attempting to directly tally on a MOOSE mesh that is "
                  "distributed, since all meshes are always replicated in OpenMC."
    required_objects = 'OpenMCCellAverageProblem'
  []
  [scaling]
    type = RunException
    input = one_mesh_no_input_file.i
    cli_args = 'Problem/scaling=2.0'
    expect_err = "Directly tallying on the \[Mesh\] is only supported for 'scaling' of unity."
    requirement = "The system shall error if attempting to directly tally on a MOOSE mesh that has a scaling not equal to 1.0."
    required_objects = 'OpenMCCellAverageProblem'
  []
  [one_mesh_global]
    type = Exodiff
    input = one_mesh_global.i
    exodiff = 'one_mesh_global_out.e'
    # This test has very few particles, and OpenMC will error if there aren't any particles
    # on a particular process
    max_parallel = 32
    requirement = "The heat source shall be tallied on an unstructured mesh and normalized against "
                  "a global tally when a single mesh is used. This test was run with successively finer "
                  "meshes (from 256 elements to 94k elements) to show that the power of the mesh tally "
                  "approaches the value of a cell tally as the difference in volume decreases."
    required_objects = 'OpenMCCellAverageProblem'
  []
  [block_restrict]
    type = Exodiff
    input = block_restrict.i
    exodiff = block_restrict_out.e
    # This test has very few particles, and OpenMC will error if there aren't any particles
    # on a particular process
    max_parallel = 32
    requirement = "Mesh tallies shall allow for block restrictions to be applied."
    required_objects = 'OpenMCCellAverageProblem'
  []
  [multiple_meshes]
    type = Exodiff
    input = multiple_meshes.i
    exodiff = 'multiple_meshes_out.e'
    # This test has very few particles, and OpenMC will error if there aren't any particles
    # on a particular process
    max_parallel = 32
    requirement = "The heat source shall be tallied on an unstructured mesh and normalized against "
                  "a local tally when multiple identical meshes are used."
    required_objects = 'OpenMCCellAverageProblem'
  []
  [multiple_meshes_global]
    type = Exodiff
    input = multiple_meshes_global.i
    exodiff = 'multiple_meshes_global_out.e'
    # This test has very few particles, and OpenMC will error if there aren't any particles
    # on a particular process
    max_parallel = 32
    requirement = "The heat source shall be tallied on an unstructured mesh and normalized against "
                  "a global tally when multiple identical meshes are used. This test was run with successively finer "
                  "meshes (from 256 elements to 94k elements) to show that the power of the mesh tally "
                  "approaches the value of a cell tally as the difference in volume decreases."
    required_objects = 'OpenMCCellAverageProblem'
  []
  [different_units]
    type = Exodiff
    input = different_units.i
    exodiff = 'different_units_out.e'
    # This test has very few particles, and OpenMC will error if there aren't any particles
    # on a particular process
    max_parallel = 32
    requirement = "The heat source shall be correctly projected onto a [Mesh] in units of meters "
                  "when the tally mesh template is in units of centimeters."
    required_objects = 'OpenMCCellAverageProblem'
  []
  [different_units_and_translations]
    type = Exodiff
    input = different_units_and_translations.i
    exodiff = 'different_units_and_translations_out.e'
    # This test has very few particles, and OpenMC will error if there aren't any particles
    # on a particular process
    max_parallel = 32
    requirement = "The heat source shall be correctly projected onto a [Mesh] in units of meters "
                  "when the tally mesh template and translations are in units of centimeters. "
                  "The output was compared against the multiple_meshes case, which used an input "
                  "entirely specified in terms of centimeters."
    required_objects = 'OpenMCCellAverageProblem'
  []
  [fission_tally_std_dev]
    type = CSVDiff
    input = fission_tally_std_dev.i
    csvdiff = fission_tally_std_dev_out.csv
    # This test has very few particles, and OpenMC will error if there aren't any particles
    # on a particular process
    max_parallel = 32
    requirement = "The fission tally standard deviation shall be output correctly for unstructured "
                  "mesh tallies."
    required_objects = 'OpenMCCellAverageProblem'
  []
  [disable_renumbering]
    type = RunException
    input = one_mesh.i
    cli_args = 'Mesh/allow_renumbering=true --distributed-mesh'
    expect_err = "Mesh tallies currently require 'allow_renumbering = false' to be set in the \[Mesh\]!"
    requirement = "Mesh tallies shall temporarily require disabled renumbering until capability is available"
    required_objects = 'OpenMCCellAverageProblem'
  []
  [file_mesh_block_restrict]
    type = RunException
    input = one_mesh.i
    cli_args = 'Problem/Tallies/Mesh/blocks=100'
    expect_err = "Block restriction is currently not supported for mesh tallies which load a mesh from a file!"
    requirement = "Mesh tallies shall error if the user attempts to apply a block restriction when using a mesh template."
    required_objects = 'OpenMCCellAverageProblem'
  []
  [block_restrict_no_blocks]
    type = RunException
    input = one_mesh_no_input_file.i
    cli_args = "Problem/Tallies/Mesh/blocks='' Mesh/parallel_type=replicated"
    expect_err = "Subdomain names must be provided if using 'blocks'!"
    requirement = "Mesh tallies shall error if the user attempts to apply a block restriction with no blocks."
    required_objects = 'OpenMCCellAverageProblem'
  []
[]
