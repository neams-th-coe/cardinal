[Tests]
  [global_with_alignment_unity_relax]
    type = CSVDiff
    input = openmc.i
    csvdiff = openmc_out.csv
    cli_args = "Problem/relaxation=constant Problem/relaxation_factor=1.0"
    requirement = "A unity relaxation factor shall be equivalent to an unrelaxed case with "
                  "globally-normalzed cell tallies on a model with perfect alignment between OpenMC model and the mesh mirror"
    required_objects = 'OpenMCCellAverageProblem'
  []
  [global_with_alignment_relax]
    type = CSVDiff
    input = openmc.i
    csvdiff = alignment_with_relaxation.csv
    cli_args = "Problem/relaxation=constant Problem/relaxation_factor=0.5 Outputs/file_base=alignment_with_relaxation"
    requirement = "The wrapping shall apply constant relaxation for a case with globally-normalized cell tallies "
                  "with perfect alignment between the OpenMC model and the mesh mirror. This test is verified by "
                  "comparing the heat source computed via relaxation with the un-relaxed iterations from the "
                  "openmc.i run (without any command line parameter settings)."
    required_objects = 'OpenMCCellAverageProblem'
  []
  [global_with_alignment_rm_relax]
    type = CSVDiff
    input = openmc.i
    csvdiff = rm_alignment_with_relaxation.csv
    cli_args = "Problem/relaxation=robbins_monro Outputs/file_base=rm_alignment_with_relaxation"
    requirement = "The wrapping shall apply Robbins-Monro relaxation for a case with globally-normalized cell tallies "
                  "with perfect alignment between the OpenMC model and the mesh mirror. This test is verified by "
                  "comparing the heat source computed via relaxation with the un-relaxed iterations from the "
                  "openmc.i run (without any command line parameter settings)."
    required_objects = 'OpenMCCellAverageProblem'
  []
  [global_with_alignment_dg_relax]
    type = CSVDiff
    input = dufek_gudowski.i
    csvdiff = dufek_gudowski_out.csv
    requirement = "The wrapping shall apply Dufek-Gudowski relaxation for a case with globally-normalized cell tallies "
                  "with perfect alignment between the OpenMC model and the mesh mirror. This test is verified by "
                  "comparing the heat source computed via relaxation with the un-relaxed iterations from the "
                  "same input file, but with the relaxation part commented out in the source code (so that we can compare "
                  "directly against runs that only differ by changing the number of particles."
    required_objects = 'OpenMCCellAverageProblem'
  []

  [local_with_alignment_unity_relax]
    type = CSVDiff
    input = openmc.i
    csvdiff = openmc_out.csv
    cli_args = "Problem/normalize_by_global_tally=false Problem/relaxation=constant Problem/relaxation_factor=1.0"
    requirement = "A unity relaxation factor shall be equivalent to an unrelaxed case with "
                  "locally-normalzed cell tallies on a model with perfect alignment between OpenMC model and the mesh mirror"
    required_objects = 'OpenMCCellAverageProblem'
  []
  [local_with_alignment_relax]
    type = CSVDiff
    input = openmc.i
    csvdiff = alignment_with_relaxation.csv
    cli_args = "Problem/normalize_by_global_tally=false Problem/relaxation=constant Problem/relaxation_factor=0.5 Outputs/file_base=alignment_with_relaxation"
    requirement = "The wrapping shall apply constant relaxation for a case with locally-normalized cell tallies "
                  "with perfect alignment between the OpenMC model and the mesh mirror. This test is verified by "
                  "comparing the heat source computed via relaxation with the un-relaxed iterations from the "
                  "openmc.i case with normalize_by_global_tally=false."
    required_objects = 'OpenMCCellAverageProblem'
  []

  [global_without_alignment_unity_relax]
    type = CSVDiff
    input = openmc_nonaligned.i
    csvdiff = openmc_nonaligned_out.csv
    cli_args = "Problem/relaxation=constant Problem/relaxation_factor=1.0"
    requirement = "A unity relaxation factor shall be equivalent to an unrelaxed case with "
                  "globally-normalzed cell tallies on a model with imperfect alignment between OpenMC model and the "
                  "mesh mirror."
    required_objects = 'OpenMCCellAverageProblem'
  []
  [global_without_alignment_relax]
    type = CSVDiff
    input = openmc_nonaligned.i
    csvdiff = nonalignment_with_relaxation.csv
    cli_args = "Problem/relaxation=constant Problem/relaxation_factor=0.5 Outputs/file_base=nonalignment_with_relaxation"
    requirement = "The wrapping shall apply constant relaxation for a case with globally-normalized cell tallies "
                  "with imperfect alignment between the OpenMC model and the mesh mirror. This test is verified by "
                  "comparing the heat source computed via relaxation with the un-relaxed iterations from the "
                  "openmc_nonaligned.i case (without additional command line parameters)"
    required_objects = 'OpenMCCellAverageProblem'
  []

  [local_without_alignment_unity_relax]
    type = CSVDiff
    input = openmc_nonaligned.i
    csvdiff = out.csv
    cli_args = "Problem/normalize_by_global_tally=false Outputs/file_base=out Problem/relaxation=constant Problem/relaxation_factor=1.0"
    min_parallel = 2
    requirement = "A unity relaxation factor shall be equivalent to an unrelaxed case with "
                  "locally-normalzed cell tallies on a model with imperfect alignment between OpenMC model and the mesh mirror"
    required_objects = 'OpenMCCellAverageProblem'
  []
  [local_without_alignment_relax]
    type = CSVDiff
    input = openmc_nonaligned.i
    csvdiff = nonalignment_relaxation_out.csv
    cli_args = "Problem/normalize_by_global_tally=false Problem/relaxation=constant Problem/relaxation_factor=0.5 Outputs/file_base=nonalignment_relaxation_out"
    min_parallel = 2
    requirement = "The wrapping shall apply constant relaxation for a case with locally-normalized cell tallies "
                  "with imperfect alignment between the OpenMC model and the mesh mirror. This test is verified by "
                  "comparing the heat source computed via relaxation with the un-relaxed iterations from the "
                  "openmc_nonaligned.i case with normalize_by_global_tally=false"
    required_objects = 'OpenMCCellAverageProblem'
  []
  [none_fixed_mesh]
    type = CSVDiff
    input = openmc.i
    csvdiff = openmc_out.csv
    cli_args = "Outputs/file_base=openmc_out Problem/fixed_mesh=false"
    min_parallel = 2
    requirement = "The system shall correctly re-initialize the same mapping when the MooseMesh does not change "
                  "during a simulation."
    required_objects = 'OpenMCCellAverageProblem'
  []
  [output_fission_tally_cell]
    type = Exodiff
    input = output_fission_tally.i
    exodiff = output_fission_tally_out.e
    cli_args = 'Problem/output_cell_mapping=false'
    requirement = "The wrapping shall allow output of the unrelaxed heat source for cell tallies"
    required_objects = 'OpenMCCellAverageProblem'
  []
  [multi_tally]
    type = CSVDiff
    input = multi_tally.i
    csvdiff = multi_tally_out.csv
    requirement = "The wrapping shall allow output of multiple tally scores, with relaxation applied independently to each score"
    required_objects = 'OpenMCCellAverageProblem'
  []
  [no_relax_with_fixed_mesh]
    type = RunException
    input = openmc_adapt.i
    expect_err = "When adaptivity is requested or a displaced problem is used, the mapping from the OpenMC model to the \[Mesh\] may vary in time."
    requirement = "The system shall correctly error if trying to use relaxation with a time-varying mesh."
    required_objects = 'OpenMCCellAverageProblem'
  []
[]
